generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Group {
  groupId    String  @id @default(cuid())
  uniqueName String  @unique
  groupName  String
  PictureUrl String?

  // apiDetail 

  members    Member[]
  messageBox Message[]
  // tab
}

model Member {
  memberId String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])

  name       String
  PictureUrl String?
  email      String
  status     Status

  GroupId String
  Group   Group     @relation(fields: [GroupId], references: [groupId])
  Message Message[]

  @@unique([email, GroupId])
}

model Message {
  messageId String   @id @default(cuid())
  text      String
  createdBy DateTime @default(now())

  memberId String
  Member   Member @relation(fields: [memberId], references: [memberId])

  Group   Group?  @relation(fields: [GroupId], references: [groupId])
  GroupId String?
}

enum Status {
  Offline
  Active
  Manager
  Owner
}

model User {
  id         String  @id
  email      String  @unique
  name       String
  PictureUrl String?

  hashedPass             String?
  isEmailVerified        Boolean                 @default(false)
  sessions               Session[]
  EmailVerificationToken EmailVerificationToken?
  oauthAccount           OAuthAccount[]
  PasswordResteToken     PasswordResetToken?
  Member                 Member[]
}

model PasswordResetToken {
  email      String   @unique
  user       User     @relation(fields: [email], references: [email], onDelete: Cascade)
  resetToken String
  sentAt     DateTime
}

model OAuthAccount {
  userId         String
  provider       String
  providerUserId String
  accessToken    String
  refreshToken   String?
  expiresAt      DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerUserId])
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationToken {
  userId String   @id
  token  String
  sentAt DateTime
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, token])
}
